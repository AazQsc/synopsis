КЛАССИФИКАЦИЯ ПАРАДИГМ ПРОГРАММИРОВАНИЯ

- Императивная
	- Процедурная
	- Аспектно-ориентированная
	- Объектно-ориентированная
	- ...
- Декларативная
	- Функциональная
	- ...
- ...


=============================================================================================================
ООП - методология программирования, основанная на представлении программы в виде совокупности объектов,
каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования (Грэди Буч).

Плюсы ООП:
+ они есть... = )

Минусы ООП:
- данные важнее, чем код -> без представления о структуре данных, сложно начать думать над решением проблемы;
- мотивирование к сложности -> ооп распологает к построению высокой пирамиды уровней абстракции;
- повсюду графы -> ооп требует разбрасывания информации по множеству мелких инкапсулированных объектов, 
  количество ссылок на эти объекты тоже растёт взрывными темпами;
- задачи поперечных срезов -> игрок наносит урон монстру или монстр получает урон от пользователя? ответ 
  следующим пунктом;
- шизофреническая инкапсуляция объектов -> создадим fightService! А ещё пусть куча кода решает проблемы доступа;
- на одинаковые данные можно смотреть по-разному -> мы регидно работаем с большим количеством инкапсулированных и
  часто дублированных данных, вместо того, чтобы пластично работать с одним набором данных;
- низкая производительность -> cочетание разброса данных по множеству мелких объектов, активное использование 
  косвенности и указателей... ;


Об озвученных минусах:
"Мне кажется, автор смешал в кучу вообще все что можно, а примеры когда люди неправильно используют инструмент пытается 
выставить как недостатки инструмента. Только если людям дать другой инструмент в котором они также разбираться особо 
не станут, ничего в лучшую сторону не изменится."

-------------------------------------------------------------------------------------------------------------
Ещё некоторые цитаты из и-нета об ООП:

"Судя по постоянно попадающимся на глаза цитатам Дейкстра критиковал именно те языки и подходы, которые в итоге 
оказывались самыми практичными и популярными. Всё-таки между академическим программированием и прикладным 
есть большая разница."