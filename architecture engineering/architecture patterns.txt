==================================================================================
Гексогональная архитектура (доклад от 16.03.19 Николай Алименков)
https://www.youtube.com/watch?v=0vrhZbGYp4k&feature=youtu.be

Domain Driven Design - книга Эрика Эвансона. 
Microservice Patterns - книга Ричардсона.

----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
ПОНЯТИЯ ИЗ DDD

Domain Context - бизнесс проблемы можно описать на языке доменов (определения основных сущностей).
Bounded Context - разбиение контекста доменов на группы на основе их связанности.

Бизнес доменные объекты это Entity. Маппинг бизнесс доменной модели.
Entity - сомоидентифицируемая сущность, уникальная сущность.
По entity должно складываться впечатление о доменной модели.
Entity - аггрегирует логику вокруг данных! То есть ентити может и должна содержать логику.

Value Object - НЕ сомоидентифицируемая сущность, является самодостаточной и инмьютебл (сумма 100$, цвет, нота).

Aggregate - обертка над entity (n - entitys), которая аггрегирует в себе несколько доменных 
									сущностей (книга + ревью на книгу).
- оставляй аггрегаты маленькими;
- пусть обращается к другим агрегатам и ентити по id а не хранит у себя на них ссылку (снижаем связанность);
- важно добиться сохранения границ консистентности изменений и транзакционности для агрегата.
- может быть прокси (содержать лишь часть информации)

Services - нужны чтобы получить доступ к entity, берут на себя часть архитекрурной работы (транзакции, кеши).

Фабрики - нужны для того чтобы создавать сложные объекты (например аггрегаты).


----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
ЗАМЕТКИ ПО DDD:

- вызывать сервис из сервиса плохо:
	Как правило, сервисы сами для себя определяют некоторую реализаци ю транзакционной системы. 
	При вызове процедур другого сервиса мы нарушаем существующие контракты.
	А ещё это увеличивает связанность. Чего мы хотим избежать используя набор сервисов.

- возвращать энтити на UI - плохо:
 	Во-первых энтити может меняться со временем (добовляются новые поля, меняются имена старых),
	И исли на этом будет что-то завязано на UI, то всё сломается.
	Во-вторых это серьезная узвимость, ведь мы получаем данные о бизнесс модели и можем попробовать совершить
	атаки через методы http(например используя id entity).
	Как это решается, - надо создать ДТО уровня адаптера, ( как вариант - дто в доменной модели),
	это будет обертка для ДТО  
- вообще для каждого протокола(уровня) может существовать своя ДТО. 
	Здесь валидацией дто будем заниматься на том уровне, которому пренадлежит каждая дто

- бизнесс ентити != персистенс ентити по DDD:
 	Ведь иначе получается, что мы мешаем логику адаптера (персистенс ентити) с бизнесом (бизнесс ентити).

- пример:
	есть сервис с некоторой логикой.
	есть второй сервис которому нужна логика первого сервиса...
	хм.. сервис из сервиса нельзя, протектед и пекедж прайвет - нельзя.. что делать?

	первая мысль - вынести эту логику в отдельный класс (преврашаем логику в класс, метод в класс) и
	реюзать, инджектить этот класс в двух сервисах.
	А что в результате?
	В результате мы получаем некую сущность, которая никак не отображает нашу доменную модель, которая по смыслу ни с чем не связана,
	которая усложняет нашу логику, делает её трудно-поддерживаемой, - это псевдо объект. Причем для каждого сервиса такой объект будет свой..
	А если в этом новом объекте ещё и состояния какие-то будут, и нам в какой-то момент нужно будет эти состояния сагрегировать, то придется ещё 
	какую-то надстройку делать над ним, какой-нибудь декоратор! Всё это очень плохо. И всё это растет. И в какой-то момент неясно где вообще наша
	бизнесс логика, - а она размазана по цепочке декораторов.
	Корни растут из процедурного стиля описания логики. Нужно описывать нашу логику через доменную модель. То есть - доменнные сущности могут и 
	должны брать на себя некоторую работу. И при условии что доменная модель умеет хранить состояния (хм.. мог неправильно понять), всё будет гут.
	Сервисы при этом берут на себя транзакционность, через них некоторые доменные сущности могут общаться, там могут собираться разные дто.
	Сервисы тут, это - порты.

	Пример:
	// 1 плохой, процедурщина...
	public List<Book> addBooks(Map<String, String> books) {
		return books.getBooks().entrySet().stream()
			.map(entry -> new Book(entry.getKey(), entry.getValue)))
			.map(bookDao::save)
			.collect(toList());
	}
	// 2 хороший, добавили ДТО, разместили там логику
	public List<Book> addBooks(Books books) {
		// 2.1 хорошо
		// return books.asList.forEach(bookDao::save);

		// 2.2 чуть лучше
		// return books.perform(bookDao::save);

		// 2.3 api уровень топ
		return return books.perform(bookDao::save).toList();
	}

	
----------------------------------------------------------------------------------
Hexagonal architecture -----------------------------------------------------------

Когда?
- сложная доменная логика (бизнесс правила, вычисления);
- сложный маппинг;
- ентити нужно часто использоваь повторно.

В центре картины - бизнесс логика. Смысл в том, чтобы по средствам адаптеров различные части системы могли к ней 
обращаться и взаимоействавать между собой через неё. Является альтернативой для Layered Architecture.

	... логика 				-> port 	-> adapter 		-> DB
 	сохрани что-то в дб 			контракт?	реализация контракта
	"Что сделать?"				сервисы		 "как сохранять?"
 	доменные объеты, дто,					"специфика работы... "
	агрегаты - содержат в себе логику

Spring Boot - это отчасти фреймворк, но лишь отчасти, для гексогональной архитектуры, ведь boot - это:
	S-MVC + S-Data + S-Cloud + S-n... то есть он уже имеет заделку в виде адаптеров к разным системам.
	

			       HTTP				<--- api tests (обычно не много)
				|
			web server (jetty, tomcat)
				|
			адаптер (Spring MVC + контроллер)	<--- integration tests
				|					(что-то из вне к порту,
			порт (сервис)					мок по порту)
				|
		 _______________________________________	contract tests		       _____________
unit tests ->	|					|		   (Spring messaging) |
		|	Busines logic:			|- порт - адаптер - брокер сообщений -| api другого 
		|	сервисы, агрегаты, ентити, дто	|- порт - aдаптер --------------------| приложения
		|_______________________________________|	 (REST Template)	      |_____________
				|
			порт (репозиторий)
				|		
			адаптер (Spring Data + JPA, - дао лэер)
			|	|			|
			|	|			|
			RDBMS	key/value storage	mongo


Responsibility:
	web server	- dispatching	
		  	- connection managment
		  	- http internal handling
		  	- encryption (https)
	адаптер (Spring MVC + контроллер)
		  	- routing
			- binding - input
			- mapping - output
			- validation
			- error handling
			- security
	порт (репозиторий)
		+
	адаптер (Spring Data + JPA, - дао лэер)
			- query building
			- mapping
			- transaction sapport
			- connection management
			- caching
	адаптер под брокер сообщений
			- mapping 
			- routing 
			- failover
			- consistency


----------------------------------------------------------------------------------
Layered Architecture -------------------------------------------------------------

	
1st tier	User Interface	(View rendered a browser, CLI)
		  |
2st tier	Presentation 	(Views, view model, Input Controllers)
		  |
		Application	(App, Controllers, App Services, Event Listeners)
		  |
		Domain Model 	(Entities, Collections, Value Objects, Domain Services, Domain Events)
		  |
		Persistence	(Repositories, Query, ORM)
		  | 
3st tier	Data		(Databases server, Search Server, 3rd party API)


1. взаимодействую только те слои, которые связаны "палочками";
2. все лэиры связаны некой инфраструкторуй (какой-то фреймворк, логгеры, etc);
3. прежде всего нужна для того чтобы разграничить некоторые вещи.

Минусы:
- со временем система становится очень сложной в поддержке (может вообще всё становиться сложным в поддержке?);
- имеющиеся модули сложно переиспользовать;


----------------------------------------------------------------------------------
CRUD architecture ----------------------------------------------------------------

Когда?
- простая логика работы с репозиторием;
- простая доменная модель;
- возможно, нет бизнесс логики. 


----------------------------------------------------------------------------------
Query Driven architecture --------------------------------------------------------

QDA представляет собой отображение (view) результатов выполнения сложных комманд.

Когда?
- в приоритете операции чтения;
- связанный контекст представлен результатами сложных запросов (комманд).

команды
- получаем по средствам команд какие-то представления;
- можем командами менять модель;
- это могут быть сложные динамические запросы.

Посмотри в сторону GraphQL...


==================================================================================
MVC - Model-View-Controller («Модель-Представление-Контроллер», «Модель-Вид-Контроллер») — схема разделения данных приложения[1],
пользовательского интерфейса[2] и управляющей логики[3] на три отдельных компонента: модель, представление и контроллер — таким
образом, что модификация каждого компонента может осуществляться независимо.

1. Модель (Model) предоставляет данные и реагирует на команды контроллера, изменяя своё состояние[1].
2. Представление (View) отвечает за отображение данных модели пользователю, реагируя на изменения модели[1].
3. Контроллер (Controller) интерпретирует действия пользователя, оповещая модель о необходимости изменений[1].

+ Можно иметь много представлений одних и техже данных.
+ Можно иметь одно представление для многих моделей данных
+ Можно разделить разработку на фрон и энд части.
+ Можно независимо изменять и заменять любую часть.
Добавить минусы MVC


==================================================================================
Добавить описание паттернов:
- Broker pattern
- Client-Server pattern

Набросок на будущее, - описать:
- микросервисную и монолитную архитекрутры
- каналы и фильтры архитектуру
- событийно-ориентированная архитектуру
- микроядерная архитектура

Ввести классификацию - разбить на типы структур и виды паттернов.

https://habr.com/ru/company/it-grad/blog/276297/
https://habr.com/ru/company/1cloud/blog/424911/


