Встроенные функциональные интерфейсы в java:
---------------------------------------------------------------------------------------------------------------------
Predicate<T>		- проверяет соблюдение некоторого условия.

        		Predicate<Integer> isPositive = x -> x > 0;

        		System.out.println(isPositive.test(5)); // true
        		System.out.println(isPositive.test(-7)); // false

---------------------------------------------------------------------------------------------------------------------
Consumer<T>		- выполняет некоторое действие над объектом типа T

			Consumer<Integer> printer = x-> System.out.printf("%d котиков \n", x);
        		printer.accept(600); // 600 котиков

-----------------------------------------------------------------------дел----------------------------------------------
Function<T,R>		- представляет функцию перехода от объекта типа T к объекту типа R

			Function<Integer, String> convert = x-> String.valueOf(x) + " котиков";
        		System.out.println(convert.apply(5)); // 5 котиков

---------------------------------------------------------------------------------------------------------------------
Supplier<T>		- не принимает никаких аргументов, но должен возвращать объект типа T

			Supplier<User> userFactory = ()->{
             
            			Scanner in = new Scanner(System.in);
            			System.out.println("Введите имя: ");
            			String name = in.nextLine();
            			return new User(name);
        		};
         
        		User user1 = userFactory.get();
        		User user2 = userFactory.get();
         
        		System.out.println("Имя user1: " + user1.getName());
        		System.out.println("Имя user2: " + user2.getName());

---------------------------------------------------------------------------------------------------------------------
UnaryOperator<T>	- принимает в качестве параметра объект типа T, 
			выполняет над ними операции и возвращает результат операций в виде объекта типа T

			UnaryOperator<Integer> square = x -> x*x;
        		System.out.println(square.apply(5)); // 25

---------------------------------------------------------------------------------------------------------------------
BinaryOperator<T>	- принимает в качестве параметра два объекта типа T, 
			выполняет над ними бинарную операцию и возвращает ее результат также в виде объекта типа T

			BinaryOperator<Integer> multiply = (x, y) -> x*y;

        		System.out.println(multiply.apply(3, 5)); // 15
        		System.out.println(multiply.apply(10, -2)); // -20


=====================================================================================================================
Контракт функционального интерфейса:
  - должен быть отмечен аннотацией @FunctionalInterface
  - должен быть строго один абстрактный метод
  - могут присутствовать default и static методы

