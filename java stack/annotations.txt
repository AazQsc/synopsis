Аннотация(@Annotation) —  специальная форма метаданных, которая может быть добавлена в исходный код.
Аннотации не имеют прямого влияния на работу кода, они аннотируют его и представляют из себя лишь мета информацию.

До появления аннотаций для конфигурации системы использовался xml-файл. Это имело свои недостатки:
- Сложная структура xml-файла;
- Компилятор не осуществляет проверку корректности;
- Класс и его метаданные разнесены по разным файлам.

Из недостатков аннотаций перед xml можно отметить следующие:
- Необходимость перекомпилировать код при изменениях;
- Для использования аннотаций необходим доступ к исходному код, которого может не быть при использовании 
  сторонних классов или библиотек.

Механизм аннотаций был введён в Java 1.5.

---------------------------------------------------------------------------------------------------------------------------------------
@Target(value = ElementType.FIELD) *
@Retention(value = RetentionPolicy.RUNTIME) **
public @interface Name {
     String name();
     String type() default  “string”;
}

* Аннотация @Target указывает, что именно мы можем пометить этой аннотацией, это может быть (см. ElementType):
    TYPE 					- Class, interface (including annotation type), or enum declaration
    FIELD 					- Field declaration (includes enum constants)
    METHOD 					- Method declaration
    PARAMETER 				- Formal parameter declaration
    CONSTRUCTOR 			- Constructor declaration
    LOCAL_VARIABLE 			- Local variable declaration 
    ANNOTATION_TYPE 		- Annotation type declaration
	
    PACKAGE 				- Package declaration
							  разместить такую аннотацию можно в Package-info.java
							  Package-info.java - это файл Java, который можно добавить в любой пакет исходного кода Java. 
							  Его целью является предоставление места для документации уровня пакета и аннотаций уровня пакета. 
							  
    TYPE_PARAMETER 			-(since 1.8) Type parameter declaration
							  Примеры:
							  -> class MyClass<@NonNull T> {}
							  -> <@Immutable T> void process(T message);
							  
    TYPE_USE 				-(since 1.8) Use of a type
							  Примеры:
							  -> class MyData implements MyTypedInterface<@Limit(2) MyType> {}
							  -> new @Immutable Rock()
							  -> (@NonNull String) calculateValue()
							  -> void doSomething() throws @Critical IOException();

	Ещё работает вариант с @Target({}) - обычно он используется при создании сложных аннотаций. 
	Такую аннотацию нельзя никуда повесить.

** Аннотация @Retention позволяет указать жизненный цикл аннотации: будет она присутствовать только в исходном коде (SOURSE), 
в скомпилированном файле(CLASS), или она будет также видна и в процессе выполнения (RUNTIME). 

Соответственно аннотации могут быть использовании для выполнения следующих задач:
- Информация для компилятора — аннотации могут быть использованы компилятором для обнаружения ошибок (например, @Override) 
  или для подавления предупреждений (@SuppressWarnings);
- Дополнительная обработка кода во время компиляции — внешнее программное обеспечение может использовать аннотации для генерации
  кода или разного рода файлов конфигураций;
- Дополнительная функциональность кода за счет обработки аннотаций во время выполнения программы — некоторые аннотации доступны во время выполнения программы.

---------------------------------------------------------------------------------------------------------------------------------------
@interface My{ 
	String str();
	int val();
	ElementType[] value();
} 

Символ @ перед ключевым словом interface указывает компилятору, что объявлена аннотация. 
Методы, объявленные в аннотации будут обозначать то, какие параметры будет принимать аннотация.
В качестве параметров могут быть использованы: примитивы, String, Enum, Class, annotations и массивы перечисленных типов.

//Аннотирование метода. 
@My(str = "Пример аннотации", val = 100, ElementType.ANNOTATION_TYPE) 
public static void myMeth() { // ... 


Допускается и объявление полей:
@RequestForEnhancement(
    id       = 2868724,
    synopsis = "Enable time-travel",
    engineer = "Mr. Peabody",
    date     = "4/1/3007"
)

---------------------------------------------------------------------------------------------------------------------------------------
Нативные способы обработки аннотаций:
- использование reflection api для обработки в RUNTIME;
- использование библиотеки javax.annotation.processing.AbstractProcessor для создания отдельного приложения, который быдет передоваться 
  компилятору в classpath. Такой обработчик будет запущен в отдельной JVM и будет ответственен за обработку исходников.

---------------------------------------------------------------------------------------------------------------------------------------
Пример использования собственной аннотации '@Repeat'

public class Solution {
  public static void main(String[] args) throws Throwable {

    for (Method method : Solution.class.getDeclaredMethods()) {
        int count = 0;
        for (Annotation annotation : method.getDeclaredAnnotations())
            if (annotation.annotationType() == Repeat.class) {
                count = method.getAnnotation(Repeat.class).count();
                break;
            }

        for (int i = 0; i < count; i++) {
            method();
	}
    }
  }

  @Repeat(count = 10)
  public static void method() {
     System.out.println("hello world");
  }

  @Target(ElementType.METHOD)
  @Retention(RetentionPolicy.RUNTIME)
  public @interface Repeat {
      int count() default 1;
  }
}

---------------------------------------------------------------------------------------------------------------------------------------
links

аннотации:	 http://cyclowiki.org/wiki/%D0%90%D0%BD%D0%BD%D0%BE%D1%82%D0%B0%D1%86%D0%B8%D1%8F_(Java)
обработчик SOURSE: https://sysout.ru/obrabotka-annotatsij-na-urovne-ishodnikov/