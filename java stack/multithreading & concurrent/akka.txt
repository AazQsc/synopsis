Akka - библиотека для написания многопоточных высоконагруженных реактивных систем,  эффективно использующих ресурсы компьютера
	основной целью которой является создание новой модели (среды) многопоточного программирования.

     - это инструментарий для создания высоконагруженных многопоточных распределенных и устойчивых приложений.

Написан на Scala
Вдохновлён Erlang

Основные фишки:
	- Многопоточное поведение без использования низкоуровневых конструкций параллелизма, таких как атомики или блокировки
	- Простая связь между компонентами
	- Кластеризованная архитектура
	- Решение проблем с распределенными / параллельными системами из коробки

--------------------------------------------------------------------------------------------------
* * * Проблемы многопоточного приложения:

№1 челлендж для инкапсуляции
	1) У нас есть метод класса А
	2) этим методом хотят воспользоваться из нескольких других потоков
	3) они могут воспользоваться этим методом в произвольном порядке
	4) могут быть сохранены инварианты класса А...
	5) общее решение очень затратно - это блокировки
		- нужно остановить/запустить поток 
		- остановленный поток не работает, даже если его дальнейшие действия могут быть выполнены и независять от вызова метода класса А
		- дедлоки

решение: разделение посылки сообщения и посылки ответа, нет колбеков
	нет блокировок, ведь изменить состояние можно только по средствам сообщений, а они обрабатываются последовательно
		
№2 иллюзия общей памяти:
	ядро процессора пишет кеш, и для того чтобы другое ядро увидело эти изменения необходимо чтобы первое ядро отправило инфу
	в общий кеш (атомик, валатайл), что очень затратно

решение: уведомление других участников через сообщения, без перегрузки кеша
	
№3 иллюзия стека вызовов
	1) есть поток А и поток В
	2) поток А хочет делигировать выполнение части задач потоку В
		- поток А должен ждать результат?
		- когда поток B должен уведомить о завершении задаги?
		- как это должно повлиять на поток А?
		- что делать в случие ошибки? что вернуть? кто должен обработать? кто должен знать об ошибке?

решение: акторы работают всегда, не блокируются
	ошибки:
		ошибки в задаче, которую нам делегировали, - отправить сообщение с ошибкой
		ошибка в работе службы, уведомить родительского актора, приостановить работу дочерних (supervision, - надзор)
		о деревьях ниже.

--------------------------------------------------------------------------------------------------
* * * Как модель аккторов отвечает современным потребностям?

Вместо вызова методов, аккторы отправляют сообщения друг другу. Отправив сообщение акктор продолжает свою работу без блокировок.
Приняв сообщение акктор обрабатывае, и возвращает результат.

Сообщение не имеет возвращаемого значения. Мы просто делигируем другому акктору выполнение какой-то работы.
Результат работы будет отправлен назад в виде сообщения.

Жизненный цикл
1. Актору пришло сообщение, он добавляет это сообщение в конец очереди.
2. Если актор не был запланирован для выполнения, он помечается как готовый к исполнению (ready to execute).
3. (скрытый) объект планировщика (scheduler entity) принимает актора и начинает его выполнять.
4. Актор берёт сообщение из передней части очереди.
5. Актор изменяет внутреннее состояние, отправляет сообщения другим участникам.
6. Актор незапланирован (actor is unscheduled).


Для того чтобы это всё работало, нужно:
- mailbox (очередь, в которой находятся сообщения)
- behavior (состояние актора, внутренние переменные, поведение актора описывает, как актор реагирует на сообщения (например,  
	отправляет больше сообщений и / или меняет состояние) и т. д.)
- сообщения (Сообщения отправляются в почтовые ящики)
- execution environment (среда выполнения, работает с акторами у которых есть сообщения)
- address

--------------------------------------------------------------------------------------------------
* * * Обзор функциональности акторов (модули).

Actor library	compile group: 'com.typesafe.akka', name: 'akka-actor_2.12', version: '2.5.13'
	- Как создавать и разрабатывать высокопроизводительные параллельные приложения.
	- Как обрабатывать ошибки в многопоточной среде.
	- Как защитить мой проект от подводных камней параллелизма.

Remoting	compile group: 'com.typesafe.akka', name: 'akka-remote_2.12', version: '2.5.13'
	- Как обращаться с акторскими системами, живущими на удаленных хостах.
	- Как обращаться с отдельными участниками на удаленных акторских системах.
	- Как преобразовать сообщения в байты.
	- Как управлять низкоуровневыми сетевыми соединениями (и пересоединениями) между хостами, обнаруживать разбитые системы и хосты, все прозрачно.
	- Как мультиплексировать связь от несвязанного набора участников в одном и том же сетевом соединении.

Cluster		compile group: 'com.typesafe.akka', name: 'akka-cluster_2.12', version: '2.5.13'
	- Как поддерживать набор акторских систем (кластер), которые могут общаться друг с другом и рассматривать друг друга как часть кластера.
	- Как безопасно внедрить новую систему в набор уже существующих членов.
	- Как надежно обнаружить системы, которые временно недоступны.
	- Как удалить неудавшиеся хосты / системы (или уменьшить систему), чтобы все остальные члены согласовали оставшееся подмножество кластера.
	- Как распределить вычисления среди текущего набора членов.
	- Как назначить членов кластера определенной роли, другими словами, предоставлять определенные услуги, а не другие.

Cluster Sharding	compile group: 'com.typesafe.akka', name: 'akka-cluster-sharding_2.12', version: '2.5.13'
	- Как моделировать и масштабировать большой набор объектов с состоянием на множестве систем.
	- Как обеспечить правильное распределение объектов в кластере, чтобы загрузка была должным образом сбалансирована между машинами.
	- Как обеспечить миграцию объектов из разбитой системы без потери состояния.
	- Как обеспечить, чтобы сущность не существовала в нескольких системах одновременно и, следовательно, сохранялась последовательной.

Cluster Singleton	compile group: 'com.typesafe.akka', name: 'akka-cluster-singleton_2.12', version: '2.5.13'
	- Как убедиться, что во всем кластере работает только один экземпляр службы.
	- Как обеспечить, чтобы служба работала, даже если в системе, в которой он находится, в настоящее время сбой или она завершает работу во время процесса масштабирования.
	- Как получить этот экземпляр от любого члена кластера, предполагая, что он может со временем мигрировать в другие системы.

Cluster Publish-Subscribe	compile group: 'com.typesafe.akka', name: 'akka-cluster-tools_2.12', version: '2.5.13'
	- Как передавать сообщения заинтересованному набору сторон в кластере.
	- Как отправить сообщение члену из заинтересованного набора сторон в кластере. 
	- Как подписаться и отказаться от подписки на события определенной темы в кластере.

Persistence	compile group: 'com.typesafe.akka', name: 'akka-persistence_2.12', version: '2.5.13'
	- Как восстановить состояние объекта / субъекта при перезапуске или сбое системы.
	- Как реализовать систему CQRS (https://docs.microsoft.com/en-us/previous-versions/msp-n-p/jj591573(v=pandp.10)).
	- Как обеспечить надежную доставку сообщений при возникновении сетевых ошибок и сбоев системы.
	- Как наследовать события домена, которые привели сущность к текущему состоянию.
	- Как использовать Event Sourcing (https://martinfowler.com/eaaDev/EventSourcing.html) в своем приложении для поддержки длительных процессов, пока проект продолжает развиваться.

Distributed Data	compile group: 'com.typesafe.akka', name: 'akka-distributed-data_2.12', version: '2.5.13'
	- Как принимать записи даже перед лицом кластерных разделов.
	- Как обмениваться данными и одновременно обеспечивать локальный доступ на чтение и запись с низкой задержкой.

Streams		compile group: 'com.typesafe.akka', name: 'akka-stream_2.12', version: '2.5.13'
	- Как обрабатывать потоки событий или большие массивы данных с высокой производительностью, используя параллелизм и ограничивать использование ресурсов.
	- Как собрать многоразовые фрагменты обработки событий / данных в гибкие конвейеры.
	- Как гибко подключать асинхронные службы друг к другу и иметь хорошую производительность.
	- Как обеспечить или использовать совместимые с Reactive Streams интерфейсы для взаимодействия с сторонней библиотекой.
	
HTTP		https://doc.akka.io/docs/akka-http/current/
	- Как выставлять службы системы или кластера во внешний мир с помощью API HTTP по-своему.
	- Как передавать большие наборы данных в систему и из нее с использованием HTTP.
	- Как передавать текущие события в систему и из нее с использованием HTTP.



--------------------------------------------------------------------------------------------------
* * * Создание акторов и деревья.

Акторы организуются в деревья (актор, создающий другого актора, становится родителем этого нового актора),
это очень похоже на то, как операционные системы организуют процессы в дерево.

Супервизор (родитель) может решить перезапустить своих дочерних субъектов на определенных типах сбоев или полностью остановить их. 
Дети никогда не завершают свою работу молча (за исключением исключения бесконечного цикла), они пробрасывают ошибку, 
и их родитель может отреагировать на это (стратегия родителя-супервизора по умолчанию - остановить и перезагрузить ребенка).

Актор будет добавлен к дереву акторов. При этом актор который создал другой актор станет его родителем. 
Какой же актор находится в корне этого дерева? У всех акторов есть общий родитель - "root guardian".
От него наследуются ещё два важных актора - "user guardian" и "system guardian"
user guardian - это родительский актор для всех акторов созданных юзером

URL:
 root guardian		/
 user guardian		/user
 system guardian	/system

То есть, перед тем как мы создадим своего первого актора, уже будут созданы три вышеописанных.

Наследник user guardian создается следующим образом:
	system.actorOf()

Метод .actorOf()  возвращает ссылку (ActorRef) на URL для данного актора. 
Так, например, если мы созданим актора с именем "someActor" следующим образом: system.actorOf (…, "someActor")	его path будет /user/someActor

Один актор создаёт другой так:
	context. actorOf ()

Самый простой способ увидеть иерархию Акторов - распечатать экземпляры ActorRef.

--------------------------------------------------------------------------------------------------
* * * Создание класса актора .

Класс актора это наследник AbstractActor 

Он имеет обязательный для переопределения метод createReceive()
этот метод будет отрабатывать каждый раз когда актор принимает сообщение

Ещё два важных метода:
  preStart () вызывается после того, как Актор начал, но прежде чем он обработает свое первое сообщение.
  postStop () вызывается непосредственно перед остановкой Актора. После этой обработки сообщения не обрабатываются.



--------------------------------------------------------------------------------------------------
* * * Жизненный цикл.

Актор останавливается явно, при этом все его дети рекурсивно, тоже, останавливаются. Таким образом все низлежащие ресурсы также будут закрыты.
Чтобы остановить актора мы используем getContext().stop(getSelf()) внутри актора - обычно в ответ на какое-либо пользовательское сообщение с запросом об остановке.
Можно остановить и другой актор getContext (). Stop (actorRef) , но это считается плохой практикой, лучше отправьте им сообщение (PoisonPill).

1) Создали актор  и запустили его .actorOf
2) отработал метод preStart () 
3) актор работает
4) останавлеваем актор getContext().stop(getSelf())
5) отработал postStop () если есть потомки сперва отрабатывает метод postStop () потомков
6) актор остановлен

Подробнее:
https://doc.akka.io/docs/akka/2.5/actors.html#actor-lifecycle

--------------------------------------------------------------------------------------------------
* * * Отправка сообщений.

Типы отправки сообщений:
1. At-most-once delivery - сообщение отпрвляется ноль или один раз, повторная отправка не производится.
2. At-least-once delivery - повторная отправка осуществляется до тех пор, пока хотябы одно сообщение не будет доставлено. Возможны дублирования.
3. Exactly-once delivery - каждое сообщение будет доставлено один раз, дублирования не допукаются.

Каждый следующий тип доставки всё более ресурсоемкий.

Нам нужно обеспечить гарантию доставки. Нужно определить наиболее удобный для нас способ:
1 - Когда сообщение отправляется в сети?
2 - Когда сообщение получено хостом целевого Актора?
3 - Когда сообщение помещается в почтовый ящик целевого участника?
4 - Когда целевой агент сообщения начинает обрабатывать сообщение?
5 - Когда целевой участник успешно обработал сообщение?

Большинство фреймворков и протоколов, требующих гарантированной доставки, фактически предоставляют что-то похожее на пункты 4 и 5. 
Хотя это звучит разумно, действительно ли это полезно?

Чтобы понять последствия, рассмотрите простой, практичный пример: пользователь пытается разместить заказ, и мы хотим только заявить, что он успешно обработан, когда он фактически находится на диске в базе данных заказов.
Если мы будем полагаться на успешную обработку сообщения, актор сообщит об успехе, как только заказ будет отправлен во внутренний API, который должен его проверить, обработать и поместить в базу данных. К сожалению, сразу после вызова API может произойти любое из следующих событий:
- Хост может закрашиться.
- Дезиллизация может потерпеть неудачу.
- Проверка может завершиться неудачей.
- База данных может быть недоступна.
- Можем столкниться с ошибкой программирования.
Это иллюстрирует, что гарантия доставки не переводится на гарантию уровня домена. Мы хотим сообщить об успехе только после того, как заказ был полностью обработан и сохранен. Единственным субъектом, который может сообщить об успехе, является само приложение, поскольку только оно имеет какое-либо понимание требуемых гарантий домена. Никакая обобщенная структура не может определить специфику конкретного домена и то, что считается успешным в этой области.
В akka можно самим определить момент в который сообщение будет считаться доставленным и обработанным.

-- Примерно так можно описать оборот сообщений:

A - Actor
M - Message

Если
	Актор A1 отправляет сообщения M1, M2, M3 в A2.
	и
	Актор A3 отправляет сообщения M4, M5, M6 в A2.

Это означает, что для сообщений Akka
	Если M1 доставлен, он должен быть доставлен до M2 и M3.
	Если M2 доставлен, он должен быть доставлен до M3.
	Если M4 доставлен, он должен быть доставлен до M5 и M6.
	Если M5 доставлен, он должен быть доставлен до M6.
	A2 может видеть сообщения от A1, чередующиеся с сообщениями от A3.
	Поскольку нет гарантированной доставки, любое из сообщений может быть отброшено, то есть не достигнет A2.
---

Подробнее о гарантиях доставки - https://doc.akka.io/docs/akka/2.5/general/message-delivery-reliability.html


+ о сообщениях:
https://doc.akka.io/docs/akka/current/actors.html#send-messages
+ диспетчер:
https://doc.akka.io/docs/akka/2.5/dispatchers.html#default-dispatcher
+ почтовые ящики
https://doc.akka.io/docs/akka/current/mailboxes.html#mailboxes
+ реактивный манифест:
https://habr.com/post/195562/






// актор отправляет сообщение сам себе
firstRef.tell("printit", ActorRef.noSender());





// взаимоотношение поток/актор


