Эволюция Java (The big picture)
 1. Programms --- products --- services --- microservices --- intelligent sysstems --- exocortex
 2. procedure --- oop --- functional
 3. The art --- N-tier, modules, components, internal structure --- connectivity, integration, external structure, async & messaging

Async Java World:
 Servlets 3.0 - asunc requests Servlets 3.1 - nio
 Spring MVC, JAX-RS, Vert.x
 Netty, ReactiveX(RxJava)
 Play Framework, Akka

Протоколы:
 STOMP(простой), AMQP(0-9-1, 1-0), MQTT(древний), DDS, XMPP, 
 транспорт: SMTP, POP3, IMAP
 и конечно JMS (api)

AMQP (Advanced Message Queuing Protocol) — открытый протокол для передачи сообщений между компонентами системы. Основная идея состоит в том, что отдельные подсистемы (или независимые приложения) могут обмениваться произвольным образом сообщениями через AMQP-брокер, который осуществляет маршрутизацию, возможно гарантирует доставку, распределение потоков данных, подписку на нужные типы сообщений.

	Подробнее:
	AMQP (Wire level transport protocol - прикладной уровень)
	- кросплатформенный
	- бтнарный протокол
	- аттрибуты: тип, channel, size, payload, frame-end (frame structure)
	Версии: 1.0 internal standard
	В RabbitMQ(RMQ) 0-9-1


Архетиктура с точки зрения протокола:

	 		SERVER
			 virtual host
 Publisher app	------>	  Exchange
			     |
			  Message Queue
			  +-----------+
 Consumer app	<------	  +-----------+
			  +-----------+


RabbitMQ - брокер сообщений (платформа, реализующая систему обмена сообщениями между компонентами программной системы ). Реализация стандарта AMQP. 

RabbitMQ состоит из:
1. Сервера RabbitMQ
2. Поддержки протоколов HTTP, XMPP и STOMP[en]
3. Клиентских библиотек AMQP для Java и .NET Framework (поддержка других языков программирования реализована в ПО других производителей)
4. Различных плагинов (таких как плагины для мониторинга и управления через HTTP или веб-интерфейс или плагин «Shovel» для передачи сообщений между брокерами)

RMQ написан на ерланг!

Отличие AMQP от JMS:
 jms(mom):  producer -			 		  - queue - consumer
 amqp:      producer - exchange - binding - queue - consumer
                       (маршрутизация)

 JMS это API для MOM (Message-Oriented Middleware), где МОМ - это нечто использующее, например, такой стек протоколов: HTTP, POP/SMTP

 JMS - standard API, native to java world, enterprizzy - протокол на джава API
 AMQP - Truly Cross - platform, comprehensive topology, more tuning(?) - формат передачи сообщений

Exchange:
 место в котором группируется кластер (набор очередей)
 например: для каждого приложения свой exchange

 Виды exchange 	- direct - соответствует key попадет в очередь 
				- fanout - копия сообщений во все очереди
				- topic - по маске?.. 
				- headers - в разные очереди по аттрибутам

					Плагины
				все недоставленные сообщения попадут в DEAD LETTER EXCHANGE
				delayed exchange - задержка перед отправкой

 аттрибуты 	- durability (останется кластер при перезапуске сервера)
			- auto-delete (удалить когда все очереди реализуются)

Binding:
 по routing-key смотрим куда кинуть сообщение (у каждого сообщения он есть и у каждой очереди он есть)

ОЧЕРЕДИ в RMQ:
 FIFO (но можно парралельно принимать сообщения)
 Durable/in-memory (последний может работать в 100 раз быстрее)
 Exclusive
 Auto-delete
 Arguments (TTL - время жизни (кол-во попыток доставки), ...)

Consumers
 Rule - одно сообщение одному консюмеру (если небыло повторов отправки)
 Serial per Channel (thread)
 подписки: pull/subsribe API
 acknowledgements (ack) - устойчивость системы (правила повторов отправок)
 	можно включить "auto-ack"..
 можно задавать приоритеты и round robin (одна очередь и несколько подписчиков(сообщения не дублируются))

-------------------------------
 
 JAVA client
  connection + tread pooll
    channel
    work pool + channel thread (не лезь в один ченнел из разных потоков)


 Весна хорошо работает с RQM !!!
 - коннекшен фактори
 - amqpAdmin
 - RabbitTemplate
 получать сообщения можно асинхронно и синхронно.

JMS это API для MOM (Message-Oriented Middleware), где МОМ - это нечто использующее примерно такой стек протоколов: HTTP, POP/SMTP


---------------------------

RabbitMq основные определения

	Producer: Приложение которое посылает сообщение
	Consumer: Приложение которое получает сообщение
	Queue: Буфер который хранит сообщения
	Message: Информация которая была отправлена от Producer k Consumer через rabbitmq
	Connection: TCP соединение между приложениями и менеджером очередей
	Channel: Виртуальное соединение внутри соединения. Когда вы публикуете или получаете сообщения через очередь — это все делается в канале.
	Exchange: Получает сообщение от поставщика и отправляет его в очередь. Зависит от типа.
	Binding: Связь между очередью и обработчиком сообщений
	Routing key: Ключ на который смотрит обработчик и решает в какую очередь перенаправить сообщение
	AMQP: Advanced Message Queuing Protocol — протокол используемый для обмена сообщениями в rabbitmq
	Users: Возможность подключится к брокеру сообщений с помощью имени пользователя и пароля. Каждый пользователь может иметь права доступа, такие как чтение, запись управление привилегиями. Пользователи так же могут иметь привилегии на определенный виртуальных хост.
	Vhost, virtual host: Способ разделения приложений используя один и тот же экземпляр RabbitMQ. У разных пользователей могут быть разные права доступа к различным виртуальным хостам и очередям, так же обработчики сообщений могут существовать только в одном.











































































