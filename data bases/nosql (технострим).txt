NoSQL технострим, осторожно, много воды!
https://www.youtube.com/watch?v=RYJS-jroFRk

NoSQL? - хорошая вводная статья (англ.)
https://medium.com/@fio.july4/nosql-7e42a2bc9d9b

Основные моменты, это конспект видеолекции:
https://habr.com/company/oleg-bunin/blog/319052/
-------------------------------------------

Impedance Mismatch - проблема программирования БД, связанная
 с реляционным отображением объектов и вложенных структур. ORM частично решает эту проблему.

Агрегат - объект хранимый в бд. Это нефиксированное представление, в отличие от нормализованной сущности.

--- Виды NoSQL БД ---

 1.
 Key-Value Store
  Представители: Redis, Riak, Voldemort, DynamoDB, Memcached
 - для бд содержание значений не прозрачно 
 - возможен поиск по диапазону ключей, можно задавать время жизни ключей и т.п.
 - такие хранилища используются для хранения изображений, создания специализированных файловых систем, 
   в качестве кэшей для объектов.
 
 2.
 Document-oriented store
  Представители: MongoDB, CouchDB,  Couchbase, eXist
 - для БД содержание значений прозрачно
 - можно работать со структурой агрегата (мы имеем что-то вроде dom-дерева?)

 3.
 Соlumn store
  Представители: HBase, Cassandra, Vertica, Hypertable, SimpleDB
 - файл в нем поля одной колонки из 3.000.000.000 записей)
 - заточены под OLAP нагрузки

 4. 
 Multi-Model (или Bigtable-подобные базы данных)
  Представители: FoundationDB, OrientDB
 - возможная модель данных: ключ строки -> семейство колонок -> колонка -> значение
 - это похоже на встроенную ORM надстройку над реляционной бд.
 - в целом, могут иметь разные реализации
 
 5.
 Graph database
  Представители Neo4j, AllegroGraph, InfiniteGraph
 - хорошо моделируют сложные данные
 - модели данных: узлы, ребра и их атрибуты
 - Так как рёбра графа материализованы (англ. materialized), то есть, являются хранимыми, 
   обход графа не требует дополнительных вычислений (как JOIN в SQL), 
   но для нахождения начальной вершины обхода требуется наличие индексов.
 
 
--- СAP теорема ---
 Есть три характеристики (или качества):
 1. Availability (доступность)   -A
	любой не упавший узел даёт ответ на запрос не ошибкой
 2. Consistency (согласованнось) -C
	все узлы видят одни и теже данные
 3. Partitioning (устойчивость)  -P
	если произошло разделение сети - сеть остается рабочей.
	пример: узел упал, кабель порвал экскаватор
 Можно выбрать только две характеристики, если мы хотим избежать противоречий (для асинхронных, распределённых систем).
 То есть, каким-то качеством нужно пожертвовать.

В действительности все популярные NoSQL базы данных на данный момент устойчивы. И мы имеем только два типа БД: AP и CP

CP: MongoDB, HBase, Redis, BigTable, Hypertable
AP: CouchDB, Raik, Dynamo, Voldemort
CA: RDBMS

https://cdn-images-1.medium.com/max/1600/0*1AO9TBK65m_7OoIl.jpg


---
CAP vs ACID

Термины Availability и Consistency в CAP-теореме гораздо более строгие чем в ACID. Такая строгая модель описывается линерализуемой моделью консистентности.

В терминах ACID мы имеем дело с НЕлинерализуемой моделью консистенции, или с сериалайзбл-моделью (?). Здесь учитывается много факторов, 
которые появляются при приближении к реальной жизни (например учет времени необходимой для совершения транзакции). 
отличии от теоремы CAP, которая является скорее математической теоремой.

Ввиду вышесказанного:
Размышлять в терминах CAP теоремы над релционными БД, возможно, не совсем правильно. 
CAP теорема чаще используется для описания  работы NoSQL БД в распределённых системах.

О моделях консистентности и распределенной общей памяти (DSM - Distributed Shared Memory) можно узнать больше:
https://parallel.ru/krukov/lec6.html
---


--- Когда использовать NoSQL? С чем они хорошо спраляются? ---

1. Нужна высокая масштабируемость
    за счет своей пониженной сложности они легче масштабируются. 
2. Прототипирование
    NoSQL решеня проще в проектировании и обслуживании.
3. Высокая доступность
4. Кэширование
5. Буферизация и очереди
6. Хранилище бинарников
7. Счетчики?
    Если нам надо что-то быстро считать берем Redis, Riak или Casandra и считаем.
8. Подсчет уникальных объектов.
9. Системы управления контентом
10. Полнотекстовый поиск (нужно брать Sphinx или ElasticSearch)


--- NoSQL антипаттерны ---

0. Культовая статья (перевод) - «Почему вы никогда не должны использовать MongoDB»:
    https://habr.com/post/231213/
    
1. Не надо в них хранить реляционные данные!
2. Embedding — это когда документ может включать другие документы или массивы документов.
    пример: У поста есть автор, у автора есть e-mail, у поста есть комментарии, у комментария есть контент и автор... у автора есть e-mail... и т.д.
3. Недостаточный Embedding (пример есть в статье из шапки (хабр))
4. Неверно выбранный тип данных
5. Недостаточно продуманная схема данных (не усложнять)


+
Можно поскать видосов вот с этой конфы:
http://junior.highload.ru/?utm_source=habr&utm_medium=media&utm_campaign=past.articles&utm_content=common





